Import('*')
import os
import glob
import pandas as pd

time_period_months = [2, 3, 6]
rolling_window_list = [732, 1828]
comment_col = 'comments'
issue_col = 'issue_comments'
commit_col = 'commits'
criteria_col_list = [comment_col, issue_col, commit_col]  
criteria_pct_list = [75, 90]
general_pct_list = [25]
consecutive_periods_major_months_dict = {2: [3, 9, 18],
                                         3: [3, 6, 12],
                                         6: [3, 6]}

post_periods_major_months_dict = {2: [3, 6, 12],
                                3: [2, 4, 8],
                                6: [2, 4]}

decline_type_list = ['threshold_mean', 'threshold_gap_qty'] #['threshold_mean','threshold_pct']
decline_threshold_list = [0.2, 0.1, 0]
decline_gap_qty_list = [0, 5]



for time_period in time_period_months:
    source = ['#source/derived/project_outcomes/generate_project_outcomes.py', 
        '#drive/output/derived/data_export/df_issue.parquet', 
        '#drive/output/derived/data_export/df_pr.parquet']
    target = [f'#drive/output/derived/project_outcomes/project_outcomes_major_months{time_period}.parquet']
    env.Python(target, source, CL_ARG = f"{time_period}")


data_source = ['#drive/output/scrape/link_committers_profile/committers_info_pr.csv', 
               '#drive/output/scrape/link_committers_profile/committers_info_push.csv']
for time_period in time_period_months:
    for rolling_window in rolling_window_list:
        for criteria_col in criteria_col_list:
            for criteria_pct in criteria_pct_list:
                for general_pct in general_pct_list:
                    consecutive_periods_list = consecutive_periods_major_months_dict[time_period]
                    post_period_length_list = post_periods_major_months_dict[time_period]

                    for consecutive_periods in consecutive_periods_list:
                        for post_period_length in post_period_length_list:
                            if post_period_length <= consecutive_periods:
                                for decline_type in decline_type_list:
                                    decline_stat_list = decline_threshold_list if decline_type == "threshold_mean" else decline_gap_qty_list
                                    for decline_stat in decline_stat_list:

                                        indir_departed = 'drive/output/derived/contributor_stats/departed_contributors'
                                        departed_filename = f'departed_contributors_major_months{time_period}_window{rolling_window}D_criteria_{criteria_col}_{criteria_pct}pct_general{general_pct}pct_consecutive{consecutive_periods}_post_period{post_period_length}_{decline_type}_{decline_stat}.parquet'

                                        indir_rank = 'drive/output/derived/contributor_stats/contributor_rank_hierarchy'
                                        rank_filename = f'contributor_rank_major_months{time_period}_window{rolling_window}D.parquet'

                                        indir_outcomes = 'drive/output/derived/project_outcomes'
                                        outcomes_filename = f'project_outcomes_major_months{time_period}.parquet'

                                        outdir = indir_outcomes
                                        target = [f'#{outdir}/project_panel_major_months{time_period}_window{rolling_window}D_criteria_{criteria_col}_{criteria_pct}pct_general{general_pct}pct_consecutive{consecutive_periods}_post_period{post_period_length}_{decline_type}_{decline_stat}.parquet']

                                        source = ['#source/derived/project_outcomes/create_project_panel.py',
                                            f'#{indir_departed}/{departed_filename}', f'#{indir_rank}/{rank_filename}', f'#{indir_outcomes}/{outcomes_filename}'] + data_source

                                        env.Python(target, source, CL_ARG = f"{time_period} {rolling_window} {criteria_col} {criteria_pct} {general_pct} {consecutive_periods} {post_period_length} {decline_type} {decline_stat}")

